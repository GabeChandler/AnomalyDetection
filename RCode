subsamp.dqf<- function(n.obs, subsample) {
  pairs <- c()
  subsample <- floor(subsample/2)*2
  for (i in 1:n.obs) {
    for (j in (i+1):(i+subsample/2)) {
      pairs <- rbind(pairs, c(i,j*(j <= n.obs) + (j-n.obs)*(j > n.obs)))
    }
  }
return(pairs)
}
  
  
dqf.outlier <- function(data, kernel="linear", range=2, angle=45, p1=1, p2=0, n.splits=100, subsample=50, z.scale=TRUE) {
  # kernelized version of depthity
  # 
  # inputs: 
  #   data - a data matrix of explanetory variables
  #   kern - a kernel function (of form "linear", "rbf" or "poly", or a function)
  #   range - how far from the anchor point should we extend in each direction
  #   angle - angle of cone from midline
  #   p1 - first parameter for kernel
  #   p2 - second parameter for kernel
  # returns:
  #   object to be used by function computeDepthity
  if (z.scale==TRUE)
    data <- apply(data, 2, scale) #z-scale data
  if (is.function(kernel)==TRUE)
    kern <- kernel
  if (kernel == "linear") {
    kern <- function(x,y)
      return(sum(x*y))
  }
  if (kernel == "rbf") {
    kern <- function(x,y)
      return(exp(-sum((x-y)^2)/p1))
  }             
  if (kernel == "poly") {
    kern <- function(x,y)
      return((sum(x*y)+p2)^p1)
  }
  scram <- sample(nrow(data))
  data <- data[scram,]
  gram <- matrix(0,nrow(data), nrow(data))
  for (i in 1:nrow(data)) {
    for (j in i:nrow(data)) {
      gram[i,j] <- kern(data[i,], data[j,])
      gram[j,i] <- gram[i,j]
    }
  }
  splits <- seq(-range,range,length.out=n.splits)
  depthity <- rep(0,length(splits))
  norm.k2 <- rep(0, nrow(data))
  error.k <- rep(0, nrow(data))
  k.to.mid <- rep(0, nrow(data))
  pairs <- subsamp.dqf(nrow(data), subsample)
  dep <- matrix(0, nrow=nrow(pairs), ncol=n.splits)
  qfs <- matrix(0, nrow=nrow(pairs), ncol=100)
  for (i.subs in 1:nrow(pairs)) {
    i <- pairs[i.subs,1]
    j <- pairs[i.subs,2]
      for (k in 1:nrow(data)) {
        norm.k2[k] <- gram[k,k] + 1/4*(gram[i,i]+gram[j,j]) + 1/2*gram[i,j]-gram[k,i]-gram[k,j]
        k.to.mid[k] <- (gram[k,i]-gram[k,j]+1/2*(gram[j,j]-gram[i,i]))/sqrt(gram[i,i]+gram[j,j]-2*gram[i,j])
        error.k[k] <- sqrt(abs(norm.k2[k] - k.to.mid[k]^2))
      }
      for (c in 1:length(splits)) {
        good <- rep(1, nrow(data))
        s <- splits[c]
        good[k.to.mid/s > 1] <- 0  #points on other side of cone tip removed
        d.to.tip <- abs(k.to.mid - s)
        good <- good * (abs(atan(error.k / d.to.tip)) < (angle/360*2*pi))  #points outside of cone removed
        good <- good * (1 - 2*(sign(k.to.mid)==sign(s)))  #which side of midpoint are they on
        depthity[c] <- min(c(sum(good==-1), sum(good==1)))
      }
      dep[i.subs,] <- depthity
      qfs[i.subs,] <- quantile(depthity, seq(0,1,length=100))
  }
  dqf <- matrix(0,nrow(data), 100)
  for (i in 1:nrow(data))
    dqf[i,] <- apply(qfs[which(pairs[,1]==i | pairs[,2]==i),],2,mean)
  dqf <- dqf[order(scram),]
  return(list(angle=angle, dqf=dqf))
}

dqf.explore <- function(dqfs) {
  n.qs <- ncol(dqfs$dqf)
  par(mfrow=c(1,1))
  y.hat <- matrix(0, nrow=nrow(dqfs$dqf), ncol=99)
  for (i in 1:nrow(dqfs$dqf)) {
    y <- dqfs$dqf[i,]/ max(dqfs$dqf[i,])
    x <- seq(0,1,length.out=length(y))
    y.hat[i,] <- diff(ksmooth(x,y,kernel="normal", band=.05, n.points=100)$y)
  }
  plot(c(0,1), c(0,.1), t='n', main="Select Observations - Press ESC when done", xlab="1 of 3", ylab="")
  for (i in 1:nrow(dqfs$dqf)) {
    lines(seq(0.0,1,length.out=99), y.hat[i,], lwd=.3, col=2)
  } 
  points(cbind(seq(0,1,length.out=99),as.vector(t(y.hat))),t='n')
  click.points <- identify(cbind(seq(0,1,length.out=99), as.vector(t(y.hat))))
  click.points <- ceiling(click.points/99)
  # round 2
  plot(c(0,1), c(0,1), t='n', main="Select Observations - Press ESC when done", xlab="2 of 3", ylab="")
  for (i in 1:nrow(dqfs$dqf)) {
    lines(seq(0,1,length.out=100), dqfs$dqf[i,]/ (nrow(dqfs$dqf)/2), lwd=.3 + (sum(i==click.points)>0), col=2 + (sum(i==click.points)>0))
  } 
  points(cbind(seq(0,1,length.out=100),as.vector(t(dqfs$dqf/(nrow(dqfs$dqf)/2)))), t='n')
  click.points2 <- identify(cbind(seq(0,1,length.out=100), as.vector(t(dqfs$dqf / (nrow(dqfs$dqf)/2)))))
  click.points2 <- ceiling(click.points2/100)
  click.points <- c(click.points, click.points2)
  # round 3
  dqf.norm <- dqfs$dqf/apply(dqfs$dqf,1,max)
  plot(c(0,1), c(0,1), t='n', ylab="", main="Select Observations - Press ESC when done", xlab="3 of 3")
  for (i in 1:nrow(dqfs$dqf)) {
    lines(seq(0,1,length.out=n.qs), dqf.norm[i,], lwd=.3 + (sum(i==click.points)>0),  col=2+ (sum(i==click.points)>0))
  } 
  points(cbind(seq(0,1,length.out=100),as.vector(t(dqf.norm))), t='n')
  click.points2 <- identify(cbind(seq(0,1,length.out=100), as.vector(t(dqf.norm))))
  click.points2 <- ceiling(click.points2/100)
  click.points <- unique(c(click.points, click.points2))
  #finale
  par(mfrow=c(1,3))
  plot(c(0,1), c(0,1), t='n', ylab="")
  for (i in 1:nrow(dqfs$dqf)) {
    lines(seq(0,1,length.out=n.qs), dqf.norm[i,], lwd=.3,  col=2)
  } 
  if (length(click.points)>0) {
  for (j in 1:length(click.points)) {
    i <- click.points[j] 
    lines(seq(0,1,length.out=n.qs), dqf.norm[i,], lwd=1,  col=2+j)
  }  
  }
  plot(c(0,1), c(0,max(dqfs$dqf/(nrow(dqfs$dqf)/2) )), t='n', ylab="")
  for (i in 1:nrow(dqfs$dqf)) {
    lines(seq(0,1,length.out=n.qs), dqfs$dqf[i,]/ (nrow(dqfs$dqf)/2), lwd=.3, col=2)
  } 
  if (length(click.points)>0) {
  for (j in 1:length(click.points)) {
    i <- click.points[j] 
    lines(seq(0,1,length.out=n.qs), dqfs$dqf[i,]/ (nrow(dqfs$dqf)/2), lwd=1,  col=2+j)
  }  
  }
  plot(c(0,1), c(0,max(y.hat)), t='n', ylab="")
  for (i in 1:nrow(dqfs$dqf)) {
    lines(seq(0.0,1,length.out=99), y.hat[i,], lwd=.3, col=2)
  }
  if (length(click.points)>0) {
  for (j in 1:length(click.points)) {
    i <- click.points[j] 
    lines(seq(0,1,length.out=99), y.hat[i,], lwd=1,  col=2+j)
  } 
  legend(.5,max(y.hat), click.points,1:length(click.points)+2)
  return(click.points)
  }
}
